RationalNode<AdditionNode<IntegerNode, IntegerNode>, DivisionNode<IntegerNode, IntegerNode>>

How to know if a node will become IntegerNode upon evaluation? (Can use std::invoke_result to deduce return type.)

Node
- std::string name
+ evaluate() -> nullptr
+ operator<<(ostream& os) -> std::string

RealNode<T> inherits from Node
- name = "RealNode" // similar for all other Node subclasses - insert the class name here
- T value, T must be a real number type
+ evaluate() -> T

IntegerNode inherits from RealNode<std::int64_t> // T is std::int64_t

RationalNode inherits from Node
- std::int64_t num
- std::int64_t den
Note on RationalNode::evaluate(): if den.evaluate() returns zero, throw std::invalid_argument

ComplexNode<T, U> inherits from Node. T and U are RealNode or subclasses thereof.
- T real
- U imag
Note that we do not implement complex number functions under the ComplexNode class.
They are performed by constructing an OpNode from the ComplexNode (e.g. ArgumentNode<ComplexNode<IntegerNode, RationalNode>>)

NumberNode and its subclasses will ONLY BE USED TO STORE RAW NUMBERS.
(E.g. One will never construct a RationalNode<AdditionNode, AdditionNode>.
DivisionNode<IntegerNode, IntegerNode>::evaluate will, however, return a RationalNode.)
Operations will be represented by OpNode and its subclasses.

OpNode inherits from Node
+ evaluate() -> depends LOL
E.g. DivisionNode<AdditionNode<IntegerNode, IntegerNode>, IntegerNode>::evaluate() returns RationalNode. (Unless second argument is a multiple of the first, in which case IntegerNode is returned? Is that legal?) But calling SqrtNode::evaluate() on an IntegerNode with value 2 will return RealNode.
Can use std::invoke_result (or more likely, your own template definition) to deduce that the return type of AdditionNode<IntegerNode, IntegerNode>::evaluate() is IntegerNode, which makes it quite clear that the first example should return a RationalNode - after all, the result of dividing two integers (where the second is nonzero) is obviously a rational.

Can perhaps also create a Simplify OpNode that simplifies any RationalNode with denominator 1 to an IntegerNode, and throws if denominator is not 1

